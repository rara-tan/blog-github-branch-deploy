name: Demo

# The workflow to execute on is comments that are newly created
on:
  issue_comment:
    types: [created]
    paths:
      - "test/**"
      - .github/workflows/demo.yml

# Permissions needed for reacting and adding comments for IssueOps commands
permissions:
  pull-requests: write
  deployments: write
  contents: write
  checks: read

jobs:
  demo:
    if: ${{ github.event.issue.pull_request }}
    runs-on: ubuntu-latest
    outputs:
      continue: ${{ steps.branch-deploy.outputs.continue }}
      noop: ${{ steps.branch-deploy.outputs.noop }}
      environment: ${{ steps.branch-deploy.outputs.environment }}
      ref: ${{ steps.branch-deploy.outputs.ref }}
      project: ${{ steps.set-outputs.outputs.project }}
    steps:
      - name: branch-deploy
        id: branch-deploy
        uses: github/branch-deploy@v9.0.0
        with:
          environment_targets: staging-demo,production-demo

      - name: example
        if: steps.branch-deploy.outputs.continue == 'true'
        run: |
          echo "params: ${{ steps.branch-deploy.outputs.params }}"

      - name: Parse Branch Deploy Parameter
        if: steps.branch-deploy.outputs.continue == 'true'
        uses: actions/github-script@v7
        with:
          script: |
            const paramString = "${{ steps.branch-deploy.outputs.params }}i"
            console.log(paramString)
            const parsed = Object.fromEntries(paramString.split(",").map(item => item.split("=")));
            for (let [key, value] of Object.entries(parsed)) {
              console.log(`::set-output name=${key}::${value}`);
            }

      - name: Test Run
        run: echo "test run"

      - name: Noop Deploy
        if: ${{ steps.branch-deploy.outputs.continue == 'true' && steps.branch-deploy.outputs.noop == 'true' }}
        run: echo "Noop Deploy!"

      - name: Regular Deploy
        if: ${{ steps.branch-deploy.outputs.continue == 'true' && steps.branch-deploy.outputs.noop != 'true' }}
        run: echo "Regular Deploy!"

      - name: Production Noop Deploy
        if: ${{ steps.branch-deploy.outputs.continue == 'true' && steps.branch-deploy.outputs.noop == 'true' && steps.branch-deploy.outputs.environment == 'production' }}
        run: echo "Production Noop Deploy!"

      - name: Production Regular Deploy
        if: ${{ steps.branch-deploy.outputs.continue == 'true' && steps.branch-deploy.outputs.noop != 'true' && steps.branch-deploy.outputs.environment == 'production' }}
        run: echo "Production Regular Deploy!"

      - name: Staging Noop Deploy
        if: ${{ steps.branch-deploy.outputs.continue == 'true' && steps.branch-deploy.outputs.noop == 'true' && steps.branch-deploy.outputs.environment == 'staging' }}
        run: echo "Staging Noop Deploy!"

      - name: Staging Regular Deploy
        if: ${{ steps.branch-deploy.outputs.continue == 'true' && steps.branch-deploy.outputs.noop != 'true' && steps.branch-deploy.outputs.environment == 'staging' }}
        run: echo "Staging Regular Deploy!"

      - name: example
        if: steps.branch-deploy.outputs.continue == 'true'
        id: set-outputs
        run: |
          PARAMS=${{ steps.branch-deploy.outputs.params }}
          IFS=',' read -ra PARAM_ARRAY <<< "$PARAMS"
          for i in "${PARAM_ARRAY[@]}"; do
            KEY=$(echo $i | awk -F'=' '{print $1}')
            VALUE=$(echo $i | awk -F'=' '{print $2}')
            eval "$KEY=$VALUE"
            echo "::set-output name=$KEY::$VALUE"
          done

  make-outputs:
    needs: [demo]
    environment: ${{ needs.demo.outputs.environment }}
    runs-on: ubuntu-latest
    outputs:
      ref: ${{ needs.demo.outputs.ref }}
      noop: ${{ needs.demo.outputs.noop }}
      continue: ${{ needs.demo.outputs.continue }}
      working_directory: ${{ vars.TEST }}
    steps:
      - run: echo "test"

  result:
    needs: [demo,make-outputs]
    if: ${{ needs.make-outputs.outputs.continue == 'true' && needs.make-outputs.outputs.noop == 'true' }}
    uses: rara-tan/blog-github-branch-deploy/.github/workflows/common.yml@main
    with:
      workspace: ${{ needs.demo.outputs.ref }}
      working_directory: ${{ needs.make-outputs.outputs.working_directory }}
